# type: ignore
"""This module contains python classes that will be used
as data models for nodes in the graph generated by gimie."""
from __future__ import annotations
from dataclasses import dataclass, field
import datetime
from typing import Optional, List

from calamus.schema import JsonLDSchema
from calamus import fields

from gimie.namespaces import SDO


@dataclass(order=True)
class Release:
    """
    This class represents a release of a repository.

    Parameters
    ----------
    tag: str
        The tag of the release.
    date: datetime.datetime
        The date of the release.
    commit_hash: str
        The commit hash of the release.
    """

    tag: str = field(compare=False)
    date: datetime.datetime = field(compare=True)
    commit_hash: str = field(compare=False)


@dataclass
class Organization:
    """See http//schema.org/Organization"""
    _id: str
    name: str
    email: Optional[List[str]] = None
    description: Optional[str] = None


class OrganizationSchema(JsonLDSchema):
    _id = fields.Id()
    name = fields.String(SDO.name)
    description = fields.String(SDO.description)

    class Meta:
        rdf_type = SDO.Organization
        model = Organization


@dataclass
class Person:
    """See http//schema.org/Person"""

    _id: str
    name: str
    email: Optional[str] = None
    given_name: Optional[str] = None
    affiliation: Optional[str] = None

    def __str__(self):
        full_name = f"({self.given_name}) " if self.given_name else ""
        email = f"<{self.email}> " if self.email else ""
        org = f"[{self.affiliation}]" if self.affiliation else ""
        return f"{self.name} {full_name}{email}{org}".strip(" ")


class PersonSchema(JsonLDSchema):
    _id = fields.Id()
    name = fields.String(SDO.name)
    given_name = fields.String(SDO.givenName)
    affiliation = fields.String(SDO.affiliation)

    class Meta:
        rdf_type = SDO.Person
        model = Person
